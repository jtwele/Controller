package controller;

import java.io.IOException;

import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

public class messageSender {

	private final String INVOICE_QUEUE = "invoice";
	private final String WAWISION_QUEUE = "waWision";
	private final String SUGAR_QUEUE = "sugar";
	
	private Channel channel;
	private ConnectionFactory factory;
	private Connection connection;
	
	public messageSender() {
		createConnection();
		declareQueue();
	}



	private void declareQueue(String queue_Name) {
		try {
			channel.queueDeclare(INVOICE_QUEUE, false, false, false, null);
			channel.queueDeclare(WAWISION_QUEUE, false, false, false, null);
			channel.queueDeclare(SUGAR_QUEUE, false, false, false, null);
		} catch (IOException e) {
			System.out.println("Channel declaration fehlgeschlagen");
		}
		
	}



	private void createConnection() {
		this.factory = new ConnectionFactory();
		try {
			this.connection = this.factory.newConnection();
		} catch (IOException e) {
			System.out.println("Verbindung erstellen fehlgeschlagen");
		}
	    try {
			this.channel = connection.createChannel();
		} catch (IOException e) {
			System.out.println("Create Channel fehlgeschlagen");
		}
	}
	
	
	
	public void sendeNachricht(String ziel, String nachricht) {
		switch (ziel) {
		case "IN":
				this.sendeAnInvoiceNinja(nachricht);
			break;
		case "WW":
				this.sendeAnWaWision(nachricht);
			break;
		case "SG":
				this.sendeAnSugarCrm(nachricht);
			break;

		default:
			break;
		}
		
	}

	private void sendeAnInvoiceNinja(String message) {
		try {
			channel.basicPublish("", INVOICE_QUEUE, null, message.getBytes());
		} catch (IOException e) {
			System.out.println("Nachrichte an Invoice Ninja fehlgeschlagen");
		}
	}

	private void sendeAnWaWision(String message) {
		try {
			channel.basicPublish("", WAWISION_QUEUE, null, message.getBytes());
		} catch (IOException e) {
			System.out.println("Nachrichte an WaWision fehlgeschlagen");
		}
	}

	private void sendeAnSugarCrm(String message) {
		try {
			channel.basicPublish("", SUGAR_QUEUE, null, message.getBytes());
		} catch (IOException e) {
			System.out.println("Nachrichte an Sugar-CRM fehlgeschlagen");
		}
	}
	
	public static void main(String[] args) {
		messageSender ms = new messageSender(queue_Name)
	}

}
